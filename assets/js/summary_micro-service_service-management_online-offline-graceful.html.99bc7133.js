"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6031],{2424:(e,t,a)=>{a.r(t),a.d(t,{comp:()=>o,data:()=>l});var i=a(6254);const n={},o=(0,a(6995).A)(n,[["render",function(e,t){return(0,i.uX)(),(0,i.CE)("div",null,t[0]||(t[0]=[(0,i.Fv)('<h1 id="微服务优雅上下线" tabindex="-1"><a class="header-anchor" href="#微服务优雅上下线"><span>微服务优雅上下线</span></a></h1><p>优雅上下线的价值:</p><ul><li><p>最小化服务中断:通过优雅上下线,可以最小化服务中断的时间和影响范围,从而确保服务的可用性和稳定性.</p></li><li><p>避免数据丢失:优雅下线可以确保正在处理的请求能够完成,避免数据丢失和请求失败</p></li><li><p>提高用户体验:优雅上下线可以确保用户在使用服务时,不会遇到任何中断或错误,从而提高用户体验和满意度</p></li><li><p>简化部署流程:通过使用自动化工具和流程,可以简化部署流程,减少人工干预和错误,提高部署效率和质量</p></li><li><p>提高可维护性:通过使用监控和日志记录工具,可以及时发现和解决问题,提高服务的可维护性和可靠性</p></li><li><h3 id="优雅上线的方法" tabindex="-1"><a class="header-anchor" href="#优雅上线的方法"><span>优雅上线的方法</span></a></h3><p>优雅上线的方法有以下几种：</p><ul><li><strong>延迟发布</strong>：即延迟暴露应用服务，比如应用需要一些初始化操作后才能对外提供服务，如初始化缓存，数据库连接池等相关资源就位，可以通过配置或代码来实现延迟暴露。</li><li><strong>QoS 命令</strong>：即通过命令行或 HTTP 请求来控制应用服务的上线和下线，比如在应用启动时不向注册中心注册服务，而是在服务健康检查完之后再手动注册服务。</li><li><strong>服务注册与发现</strong>：即通过注册中心来管理应用服务的状态和路由信息，比如在应用启动时向注册中心注册服务，并监听服务状态变化事件，在应用停止时向注册中心注销服务，并通知其他服务更新路由信息。</li><li><strong>灰度发布</strong>：即通过分流策略来控制应用服务的流量分配，比如在发布新版本的应用时，先将部分流量导入到新版本的应用上，观察其运行情况，如果没有问题再逐步增加流量比例，直到全部切换到新版本的应用上。</li></ul><p>上面的方法核心思想都是一个，就是等服务做好了准备再把请求放行过去。</p><h3 id="优雅上线的实现" tabindex="-1"><a class="header-anchor" href="#优雅上线的实现"><span>优雅上线的实现</span></a></h3><p>大部分优雅上线都是通过注册中心和服务治理能力来实现的。</p><p>对于初始化过流程较长的应用，由于注册通常与应用初始化过程同步进行，因此可能出现应用还未完全初始化就已经被注册到注册中心供外部消费者调用，此时直接调用可能会导致请求报错。</p><p>所以，通过服务注册与发现来做优雅上线的基本思路是：</p><ul><li>在应用启动时，提供一个健康检查接口，用于反馈服务的状态和可用性。</li><li>应用启动后，可以采用下列方法来使新的请求暂时不进入新版的服务实例。 <ul><li>暂时不向注册中心注册服务。</li><li>隔离服务，有些注册中心支持隔离服务实例，比如北极星。</li><li>将权重配置为0。</li><li>将服务实例的 Enable 改为 False。</li><li>让健康检查接口返回不健康的状态。</li></ul></li><li>在新版本的应用实例完成初始化操作后，确保了可用性后，再对应的将上述的方法取消，这样就可以让新的请求被路由到新版本的应用实例上。</li><li>如果需要预热，就让流量进入新版本的应用实例时按比例的一点点增加。</li></ul><p>这样，就可以实现优雅上线的过程，保证请求进来的时候，不会因为新版本的应用实例没有准备好而导致请求失败。</p></li></ul><h3 id="优雅下线的方法" tabindex="-1"><a class="header-anchor" href="#优雅下线的方法"><span>优雅下线的方法</span></a></h3><p>无损下线的一些常用的工具或框架有：</p><ul><li><strong>Dubbo-go</strong>：支持多种注册中心、负载均衡、容灾策略等，可以实现优雅上下线的设计与实践。</li><li><strong>Spring Cloud</strong>：提供了多种组件来实现服务的配置、路由、监控、熔断等，可以通过监听 ContextClosedEvent 事件来实现优雅下线的逻辑。</li><li><strong>Docker</strong>：可以通过 Docker Stop 或 Docker Kill 命令来停止容器，前者会发送 SIGTERM 信号给容器的 PID1 进程，后者会发送 SIGKILL 信号。如果程序能响应 SIGTERM 信号，就可以实现优雅下线的操作。</li></ul><h3 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h3>',7)]))}]]),l=JSON.parse('{"path":"/summary/micro-service/service-management/online-offline-graceful.html","title":"微服务优雅上下线","lang":"zh-CN","frontmatter":{"description":"微服务优雅上下线 优雅上下线的价值: 最小化服务中断:通过优雅上下线,可以最小化服务中断的时间和影响范围,从而确保服务的可用性和稳定性. 避免数据丢失:优雅下线可以确保正在处理的请求能够完成,避免数据丢失和请求失败 提高用户体验:优雅上下线可以确保用户在使用服务时,不会遇到任何中断或错误,从而提高用户体验和满意度 简化部署流程:通过使用自动化工具和流程...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/notes-base/summary/micro-service/service-management/online-offline-graceful.html"}],["meta",{"property":"og:site_name","content":"Offer收割机"}],["meta",{"property":"og:title","content":"微服务优雅上下线"}],["meta",{"property":"og:description","content":"微服务优雅上下线 优雅上下线的价值: 最小化服务中断:通过优雅上下线,可以最小化服务中断的时间和影响范围,从而确保服务的可用性和稳定性. 避免数据丢失:优雅下线可以确保正在处理的请求能够完成,避免数据丢失和请求失败 提高用户体验:优雅上下线可以确保用户在使用服务时,不会遇到任何中断或错误,从而提高用户体验和满意度 简化部署流程:通过使用自动化工具和流程..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-11T08:46:41.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-11T08:46:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"微服务优雅上下线\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-11T08:46:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Jason\\",\\"url\\":\\"https://jason.com\\"}]}"]]},"git":{"createdTime":1744361201000,"updatedTime":1744361201000,"contributors":[{"name":"Jason Statham","username":"Jason Statham","email":"xpt_notes@163.com","commits":1,"url":"https://github.com/Jason Statham"}]},"readingTime":{"minutes":3.82,"words":1147},"filePathRelative":"summary/micro-service/service-management/online-offline-graceful.md","localizedDate":"2025年4月11日","autoDesc":true}')},6995:(e,t)=>{t.A=(e,t)=>{const a=e.__vccOpts||e;for(const[e,i]of t)a[e]=i;return a}}}]);