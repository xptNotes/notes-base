"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3329],{721:(t,e,a)=>{a.r(e),a.d(e,{comp:()=>o,data:()=>r});var s=a(6254);const n={},o=(0,a(6995).A)(n,[["render",function(t,e){return(0,s.uX)(),(0,s.CE)("div",null,e[0]||(e[0]=[(0,s.Fv)('<h1 id="热部署" tabindex="-1"><a class="header-anchor" href="#热部署"><span>热部署</span></a></h1><h2 id="工程级实现" tabindex="-1"><a class="header-anchor" href="#工程级实现"><span>工程级实现</span></a></h2><h3 id="spring-boot-devtools" tabindex="-1"><a class="header-anchor" href="#spring-boot-devtools"><span>Spring Boot DevTools</span></a></h3><blockquote><ul><li><strong>简单易用</strong>：Spring Boot DevTools 是 Spring Boot 提供的一个开发工具，它可以自动监测类路径下的文件变化，并在文件更新时自动重启应用程序。</li><li><strong>轻量级</strong>：无需额外的复杂配置，只需要在项目中添加依赖即可使用。</li></ul></blockquote><h3 id="jrebel" tabindex="-1"><a class="header-anchor" href="#jrebel"><span>JRebel</span></a></h3><blockquote><ul><li><strong>高性能</strong>：JRebel 是一款专业的 Java 热部署工具，它可以在不重启应用程序的情况下实时更新类文件和资源文件，大大缩短了开发和调试的时间。</li><li><strong>支持多种框架</strong>：支持 Spring、Hibernate、Struts 等多种 Java 框架，具有广泛的适用性。</li></ul></blockquote><h3 id="tomcat-的热部署功能" tabindex="-1"><a class="header-anchor" href="#tomcat-的热部署功能"><span>Tomcat 的热部署功能</span></a></h3><blockquote><ul><li><strong>与 Servlet 容器集成</strong>：Tomcat 是一个常用的 Servlet 容器，它本身提供了热部署功能，可以在不重启 Tomcat 服务器的情况下更新 Web 应用程序。</li><li><strong>配置相对复杂</strong>：需要对 Tomcat 的配置文件进行一定的修改</li></ul></blockquote><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Context</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/yourApp&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> docBase</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;path/to/your/app&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> reloadable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;true&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    &lt;!-- 其他配置 --&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jrebel原理分析" tabindex="-1"><a class="header-anchor" href="#jrebel原理分析"><span>JRebel原理分析</span></a></h2><p>JRebel 是一款专业的 Java 热部署工具，其核心原理是通过<strong>拦截类加载过程</strong>，在不重启 JVM 的情况下实时更新类文件、资源文件和配置，从而实现代码修改后的快速生效。以下是其核心原理的详细解析：</p><h3 id="绕过类加载的限制" tabindex="-1"><a class="header-anchor" href="#绕过类加载的限制"><span><strong>绕过类加载的限制</strong></span></a></h3><p>Java 类加载机制中，类一旦被加载，JVM 会在内存中保留该类的元数据（如 <code>Class</code> 对象），且<strong>不允许重新加载同一个类</strong>（除非通过自定义类加载器隔离类空间）。<br> JRebel 的核心突破点在于：</p><ol><li><p><strong>不依赖类加载器隔离</strong>：无需为每个更新的类创建新的类加载器，而是直接修改<strong>已加载类的字节码</strong>。</p></li><li><p><strong>利用 JVM 提供的字节码增强机制</strong>：通过 Java Agent（JVMTI/Instrumentation API）在运行时动态修改类的字节码，实现热更新。</p></li></ol><h3 id="核心" tabindex="-1"><a class="header-anchor" href="#核心"><span>核心</span></a></h3><h4 id="java-agent-注入" tabindex="-1"><a class="header-anchor" href="#java-agent-注入"><span><strong>Java Agent 注入</strong></span></a></h4><p>JRebel 通过启动时加载的 <strong>Java Agent</strong>（<code>jrebel.jar</code>）与 JVM 交互，主要功能包括：</p><ul><li><strong>拦截类加载</strong>：在类被加载到 JVM 之前，修改其字节码（植入 JRebel 监控逻辑）。</li><li><strong>运行时字节码修改</strong>：当代码发生变更时，通过 <code>Instrumentation.retransformClasses()</code> 重新转换已加载类的字节码。</li></ul><h4 id="字节码增强-bytecode-enhancement" tabindex="-1"><a class="header-anchor" href="#字节码增强-bytecode-enhancement"><span><strong>字节码增强（Bytecode Enhancement）</strong></span></a></h4><p>在类加载阶段，JRebel 会对类字节码进行以下增强：</p><ul><li><strong>插入变更监控逻辑</strong>：在类的方法、字段、构造函数中插入钩子（Hook），用于检测运行时的变更。</li><li><strong>记录类元数据</strong>：保存类的原始结构（如方法签名、字段类型等），以便在更新时对比差异。</li></ul><h4 id="增量更新-delta-compilation" tabindex="-1"><a class="header-anchor" href="#增量更新-delta-compilation"><span><strong>增量更新（Delta Compilation）</strong></span></a></h4><p>当代码修改后，JRebel 会：</p><ol><li><p><strong>对比新旧字节码</strong>：分析修改的类文件，生成<strong>增量变更</strong>（如新增的方法、修改的字段）。</p></li><li><p>选择性更新</p><p>：仅将变更部分应用到已加载的类中，而非重新加载整个类。</p><ul><li>例如：修改方法体时，直接替换方法的字节码；新增方法时，动态添加到类的方法列表中。</li></ul></li></ol><h4 id="处理对象状态" tabindex="-1"><a class="header-anchor" href="#处理对象状态"><span><strong>处理对象状态</strong></span></a></h4><p>类更新后，已创建的对象可能持有旧版本的状态，JRebel 通过以下方式处理：</p><ul><li><strong>对象字段迁移</strong>：当类的字段发生变更（如新增字段），JRebel 会在运行时自动调整对象的内存布局，确保新旧版本兼容。</li><li><strong>弱引用与缓存</strong>：对旧版本的类和对象使用弱引用，避免内存泄漏，并在合适时机清理旧对象。</li></ul><h4 id="支持的变更类型" tabindex="-1"><a class="header-anchor" href="#支持的变更类型"><span><strong>支持的变更类型</strong></span></a></h4><p>JRebel 能处理以下常见代码变更：</p><table><thead><tr><th><strong>变更类型</strong></th><th><strong>支持情况</strong></th><th><strong>原理说明</strong></th></tr></thead><tbody><tr><td>修改方法体</td><td>✅ 完全支持</td><td>直接替换方法的字节码，运行时生效。</td></tr><tr><td>新增方法 / 字段</td><td>✅ 完全支持</td><td>动态向类中添加新成员，已存在的对象会自动适配新字段（默认值为 null/0）。</td></tr><tr><td>修改方法签名（参数 / 返回值）</td><td>❌ 不支持</td><td>方法签名变更会导致原有调用链路失效，需重启 JVM（JRebel 建议通过重构避免）。</td></tr><tr><td>修改类继承关系</td><td>❌ 不支持</td><td>类的继承结构在 JVM 中固化，无法动态修改。</td></tr><tr><td>修改静态变量</td><td>✅ 支持</td><td>直接更新静态变量的值，但需注意多线程场景下的可见性（可能需要配合 <code>volatile</code>）。</td></tr></tbody></table><h5 id="与传统热部署的区别" tabindex="-1"><a class="header-anchor" href="#与传统热部署的区别"><span><strong>与传统热部署的区别</strong></span></a></h5><table><thead><tr><th><strong>对比维度</strong></th><th><strong>JRebel</strong></th><th><strong>传统自定义类加载器</strong></th><th><strong>Spring Boot DevTools</strong></th></tr></thead><tbody><tr><td><strong>类加载机制</strong></td><td>不替换类加载器，直接修改字节码</td><td>使用新类加载器隔离类空间</td><td>重启应用（触发类加载器重新加载）</td></tr><tr><td><strong>更新粒度</strong></td><td>方法 / 字段级增量更新</td><td>类级更新（需重新实例化对象）</td><td>全应用重启</td></tr><tr><td><strong>性能影响</strong></td><td>低（仅变更部分字节码）</td><td>中（类加载器内存占用 / GC 压力）</td><td>高（每次重启需重新初始化）</td></tr><tr><td><strong>适用场景</strong></td><td>生产环境热部署、快速调试</td><td>实验性场景（如插件系统）</td><td>开发环境快速迭代</td></tr></tbody></table><h4 id="局限性与注意事项" tabindex="-1"><a class="header-anchor" href="#局限性与注意事项"><span><strong>局限性与注意事项</strong></span></a></h4><ol><li><p>不支持的场景</p><ul><li>涉及类结构的重大变更（如修改方法签名、继承关系）</li><li>原生类型（如 <code>int</code>、<code>String</code>）的修改（需通过框架层适配，如 Spring Bean 的重新注入）。</li></ul></li><li><p>框架兼容性</p><p>需与框架集成（如 Spring、Hibernate），通过插件或配置文件告知 JRebel 如何处理框架管理的对象（如 Bean 的重新初始化）。</p></li><li><p>许可证限制</p><p>JRebel 是商业软件，需购买许可证，免费版有功能限制（如支持类数、更新频率）。</p></li></ol><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>JRebel 的核心优势在于<strong>无需重启 JVM 即可实现细粒度的代码更新</strong>，其原理基于 Java Agent 的字节码增强和运行时类修改技术。这使其在开发和预生产环境中大幅提升效率，但对类结构变更的支持有限，需结合项目需求合理使用。对于大型企业级应用，JRebel 是热部署的首选方案之一，而轻量级项目可优先考虑 Spring Boot DevTools 或自定义类加载器。</p>',36)]))}]]),r=JSON.parse('{"path":"/summary/java/jvm/hot-deployment.html","title":"热部署","lang":"zh-CN","frontmatter":{"description":"热部署 工程级实现 Spring Boot DevTools 简单易用：Spring Boot DevTools 是 Spring Boot 提供的一个开发工具，它可以自动监测类路径下的文件变化，并在文件更新时自动重启应用程序。 轻量级：无需额外的复杂配置，只需要在项目中添加依赖即可使用。 JRebel 高性能：JRebel 是一款专业的 Java 热...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/notes-base/summary/java/jvm/hot-deployment.html"}],["meta",{"property":"og:site_name","content":"Offer收割机"}],["meta",{"property":"og:title","content":"热部署"}],["meta",{"property":"og:description","content":"热部署 工程级实现 Spring Boot DevTools 简单易用：Spring Boot DevTools 是 Spring Boot 提供的一个开发工具，它可以自动监测类路径下的文件变化，并在文件更新时自动重启应用程序。 轻量级：无需额外的复杂配置，只需要在项目中添加依赖即可使用。 JRebel 高性能：JRebel 是一款专业的 Java 热..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-10T13:01:21.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-10T13:01:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"热部署\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-10T13:01:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Jason\\",\\"url\\":\\"https://jason.com\\"}]}"]]},"git":{"createdTime":1746882081000,"updatedTime":1746882081000,"contributors":[{"name":"Jason Statham","username":"Jason Statham","email":"xpt_notes@163.com","commits":1,"url":"https://github.com/Jason Statham"}]},"readingTime":{"minutes":5.21,"words":1563},"filePathRelative":"summary/java/jvm/hot-deployment.md","localizedDate":"2025年5月10日","autoDesc":true}')},6995:(t,e)=>{e.A=(t,e)=>{const a=t.__vccOpts||t;for(const[t,s]of e)a[t]=s;return a}}}]);