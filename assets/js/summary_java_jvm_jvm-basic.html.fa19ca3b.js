"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5582],{6358:(a,s,i)=>{i.r(s),i.d(s,{comp:()=>h,data:()=>r});var e=i(6254);const l=i.p+"assets/img/java-object-memory-allocate.99532768.jpg",n=i.p+"assets/img/Tomcat-classloader.8260e9fd.jpg",t={},h=(0,i(6995).A)(t,[["render",function(a,s){return(0,e.uX)(),(0,e.CE)("div",null,s[0]||(s[0]=[(0,e.Fv)('<h1 id="jvm基础" tabindex="-1"><a class="header-anchor" href="#jvm基础"><span>JVM基础</span></a></h1><h1 id="一、java对象" tabindex="-1"><a class="header-anchor" href="#一、java对象"><span>一、java对象</span></a></h1><h2 id="_1-1-对象的内存布局" tabindex="-1"><a class="header-anchor" href="#_1-1-对象的内存布局"><span>1.1.对象的内存布局</span></a></h2><p>对象在内存中主要分为三块数据: 对象头、实例数据、对齐数据.</p><h3 id="对象头数据结构" tabindex="-1"><a class="header-anchor" href="#对象头数据结构"><span>对象头数据结构</span></a></h3><h3 id="对齐数据解析" tabindex="-1"><a class="header-anchor" href="#对齐数据解析"><span>对齐数据解析</span></a></h3><h3 id="数组和非数组对象" tabindex="-1"><a class="header-anchor" href="#数组和非数组对象"><span>数组和非数组对象</span></a></h3><h2 id="_1-2-对象的内存分配策略" tabindex="-1"><a class="header-anchor" href="#_1-2-对象的内存分配策略"><span>1.2.对象的内存分配策略</span></a></h2><figure><img src="'+l+'" alt="java-object-memory-allocate" tabindex="0" loading="lazy"><figcaption>java-object-memory-allocate</figcaption></figure><h3 id="标量替换" tabindex="-1"><a class="header-anchor" href="#标量替换"><span>标量替换</span></a></h3><h3 id="tlab分配" tabindex="-1"><a class="header-anchor" href="#tlab分配"><span>TLAB分配</span></a></h3><h4 id="tlab介绍" tabindex="-1"><a class="header-anchor" href="#tlab介绍"><span>TLAB介绍</span></a></h4><blockquote><p>TLAB全称: Thread Local Allocation Buffer 线程本地分配缓冲区</p><p>程序启动时可以通过参数<code>-XX:UseTLAB</code>设置是否开启TLAB分配）</p><p>TLAB并不是独立在堆空间之外的区域，而是JVM直接在<code>Eden</code>区为每条线程划分出来的。默认情况下，TLAB区域的大小只占整个<code>Eden</code>区的<code>1%</code>，不过也可以通过参数：<code>-XX:TLABWasteTargetPercent</code>设置TLAB区所占用<code>Eden</code>区的空间占比。</p><p>一般情况下，JVM会将TLAB作为内存分配的首选项（C2激进优化下的栈上分配除外），只有当TLAB区分配失败时才会开始尝试在堆上分配。</p></blockquote><h4 id="tlab分配过程" tabindex="-1"><a class="header-anchor" href="#tlab分配过程"><span>TLAB分配过程</span></a></h4><h3 id="老年代分配" tabindex="-1"><a class="header-anchor" href="#老年代分配"><span>老年代分配</span></a></h3><blockquote><p>初次分配时,大对象直接进入老年代.</p><p>一般对象进入老年代的情况分为三种: 大对象初次分配、GC晋升长期存活对象、GC晋升动态年龄判断符合条件的对象</p><p>在JVM启动的时候你可以通过<code>-XX:PretenureSizeThreshold</code>参数指定大对象的阈值，如果对象在分配时超出这个大小，会直接进入年老代。</p></blockquote><h3 id="eden区分配" tabindex="-1"><a class="header-anchor" href="#eden区分配"><span>Eden区分配</span></a></h3><p>Eden区域分配时,会有两种分配方式:</p><ul><li><p>①指针碰撞：指针碰撞是Java在为对象分配堆内存时的一种内存分配方式，一般适用于</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Serial、ParNew</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>等不会产生内存碎片、堆内存完整的的垃圾收集器。</p><ul><li>分配过程：堆中已用分配内存和为分配的空闲内存分别会处于不同的一侧，通过一个指针指向分界点区分，当JVM要为一个新的对象分配内存时，只需把指针往空闲的一端移动与对象大小相等的距离即可。</li></ul></li><li><p>②空闲列表：与指针碰撞一样，空闲列表同样是Java在为新对象分配堆内存时的一种内存分配方式，一般适用于CMS等一些会产生内存碎片、堆内存不完整的垃圾收集器。</p><ul><li>分配过程：堆中的已用内存和空闲内存相互交错，JVM通过维护一张内存列表记录可用的空闲内存块信息，当创建新对象需要分配内存时，从列表中找到一个足够大的内存块分配给对象实例，并同步更新列表上的记录，当GC收集器发生GC时，也会将已回收的内存更新到内存列表。</li></ul></li></ul><p>分配方式的选择,取决于GC垃圾回收器.</p><p>指针碰撞适合内存整齐的堆空间,空闲列表则更适合内存不完整的堆空间.</p><blockquote><p>在Eden区分配内存时，因为是共享区域，必然会存在多条线程同时操作的可能，所以为了避免出现线程安全问题，在Eden区分配内存时需要进行同步处理，在HotSpot VM中采用的是线程CAS+失败换位重试的方式保证原子性。</p></blockquote><h2 id="_1-3-初始化流程" tabindex="-1"><a class="header-anchor" href="#_1-3-初始化流程"><span>1.3.初始化流程</span></a></h2><p>对象初始化分为一下内容:</p><ul><li>内存初始化 <ul><li>各个数据类型对应的零</li></ul></li><li>设置对象头</li><li>执行init函数 <ul><li>先按顺序执行父类静态字段、静态代码块(哪个在前就先执行哪个)</li><li>执行子类静态字段、静态代码块(哪个在前就先执行哪个)</li><li>按顺序执行父类实例字段</li><li>按顺序执行子类实例字段</li><li>执行父类构造函数</li><li>执行子类构造函数</li></ul></li></ul><h2 id="_1-4-对象的定位" tabindex="-1"><a class="header-anchor" href="#_1-4-对象的定位"><span>1.4.对象的定位</span></a></h2><p>对象的定位方式分为两种:句柄方式、直接指针</p><p>HotSpot使用直接指针方式进行对象访问</p><h3 id="对象定位方式详解" tabindex="-1"><a class="header-anchor" href="#对象定位方式详解"><span>对象定位方式详解</span></a></h3><h3 id="对象引用" tabindex="-1"><a class="header-anchor" href="#对象引用"><span>对象引用</span></a></h3><p>java对象引用分为四种:强引用、软引用、弱引用、虚引用</p><blockquote><p>一下摘抄至深入理解java虚拟机</p></blockquote><h4 id="强引用" tabindex="-1"><a class="header-anchor" href="#强引用"><span>强引用</span></a></h4><h4 id="软引用" tabindex="-1"><a class="header-anchor" href="#软引用"><span>软引用</span></a></h4><p>内存不足时,会回收</p><h4 id="弱引用" tabindex="-1"><a class="header-anchor" href="#弱引用"><span>弱引用</span></a></h4><blockquote><p><strong>弱引用与软引用最大的区别就是弱引用比软引用的生命周期更短暂。垃圾回收器在扫描它所管辖的内存区域的过程中，只要发现弱引用的对象，不管内存空间是否有空闲，都会立刻回收它</strong>。</p></blockquote><h4 id="虚引用" tabindex="-1"><a class="header-anchor" href="#虚引用"><span>虚引用</span></a></h4><blockquote><p>最弱的一种引用关系.一个对象是否有虚引用的存在,不会对其生存时间构成影响,也无法通过虚引用来获取对象.</p><p>为一个对象设置虚引用关联,就是在这个对象被垃圾回收器回收时收到一个通知.</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[] args) throws InterruptedException {</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        ReferenceData</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> obj </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ReferenceData</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        obj</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;test&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        ReferenceQueue</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ReferenceData</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> referenceQueue </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ReferenceQueue</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        PhantomReference</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ReferenceData</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> phantomReference </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> PhantomReference</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(obj</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">referenceQueue)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Thread</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> t </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(()</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">{</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">             while</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">){</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">                 Object</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> ref </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> referenceQueue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">poll</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                 if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(ref</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">){</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">                     PhantomReference</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> pRef </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (PhantomReference) ref</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                     System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(ref);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                     System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">pRef</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">                 }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">             }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        })</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        obj</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">gc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">gc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">join</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">console</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">lang</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ref</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">PhantomReference</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">36814be9</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PhantomReference 可以监控对象的回收</p><h3 id="虚引用和java自带的finalize功能区别" tabindex="-1"><a class="header-anchor" href="#虚引用和java自带的finalize功能区别"><span>虚引用和java自带的finalize功能区别</span></a></h3><h4 id="虚引用-1" tabindex="-1"><a class="header-anchor" href="#虚引用-1"><span>虚引用</span></a></h4><p>虚引用涉及的queue不会影响到GC的线程,只是起到通知作用,因为无法通过虚引用获取对象.</p><p>所以针对Phantom References 必须设置一个定时器不同的从queue队列中取出虚引用对象手动删除.</p><h4 id="finalize功能" tabindex="-1"><a class="header-anchor" href="#finalize功能"><span>finalize功能</span></a></h4><p>在可达性分析算法中,判断一个对象是否存活至少要经历两次标记过程.</p><ul><li>直接从GC Roots出发,发现不可达</li><li>进行筛选,筛选条件是此对象是否有必要执行finalize()方法. <ul><li>·当对象没有重写finalize()方法或者该方法已经执行了一次,就会被标记成没必要执行</li><li>如果重写了finalize()方法,并且没有被执行,就会执行一次finalize()方法</li></ul></li></ul><p>如果要执行该对象的finalize()方法,那么jvm会将该对象放置到F-Queue队列中. 并在稍后有一个虚拟机自动建立的、低优先级的Finalizer线程去执行它.</p><blockquote><p>注意</p><p>finalize()方法只能被执行一次.</p><p>不建议使用finalize方法来实现功能,如资源释放.可以有虚引用替换.</p></blockquote><h1 id="二、jvm内存区域" tabindex="-1"><a class="header-anchor" href="#二、jvm内存区域"><span>二、JVM内存区域</span></a></h1><h2 id="_2-1-内存区域划分" tabindex="-1"><a class="header-anchor" href="#_2-1-内存区域划分"><span>2.1.内存区域划分</span></a></h2><p>jvm内存区域分为:程序计数器、虚拟机栈、本地方法栈、堆、方法区</p><h3 id="常量池概念" tabindex="-1"><a class="header-anchor" href="#常量池概念"><span>常量池概念</span></a></h3><h1 id="三、jvm垃圾收集器和内存分配策略" tabindex="-1"><a class="header-anchor" href="#三、jvm垃圾收集器和内存分配策略"><span>三、JVM垃圾收集器和内存分配策略</span></a></h1><h2 id="_3-1-常见垃圾回收算法" tabindex="-1"><a class="header-anchor" href="#_3-1-常见垃圾回收算法"><span>3.1.常见垃圾回收算法</span></a></h2><h2 id="_3-2-常见垃圾回收器" tabindex="-1"><a class="header-anchor" href="#_3-2-常见垃圾回收器"><span>3.2.常见垃圾回收器</span></a></h2><h3 id="cms垃圾回收器" tabindex="-1"><a class="header-anchor" href="#cms垃圾回收器"><span>CMS垃圾回收器</span></a></h3><h4 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述:</span></a></h4><p>CMS 是一种以 <strong>低停顿时间</strong> 为目标的垃圾回收器，主要用于老年代（Old Generation）的垃圾回收。它通过 <strong>并发标记</strong> 和 <strong>并发清除</strong> 的方式，尽量减少应用线程的停顿时间，适合对响应时间要求较高的应用（如 Web 服务器、实时系统）。</p><h4 id="回收流程" tabindex="-1"><a class="header-anchor" href="#回收流程"><span>回收流程</span></a></h4><p>CMS主要流程如下:</p><ol><li>初始标记 <ul><li>目标:标记从GC Roots直接可达的对象</li><li>特点:需要STW,但是停顿时间很短</li><li>触发条件: 老年代空间使用率达到一定阈值(默认92%)</li></ul></li><li>并发标记 <ul><li>目标: 从初始标记对象出发,迭代标记所有对象</li><li>特点: 与应用线程并发执行,不会导致应用停顿</li><li>问题: 在标记过程,对象之间的引用可能发生变化</li></ul></li><li>重新标记 <ul><li>目标:修正在并发标记过程中引用发生变化导致的标记错误</li><li>特点: 需要STW,但是停顿时间比初始标记稍长</li><li>优化: 通过卡表和写屏障减少需要重新标记的对象数量</li></ul></li><li>并发清除 <ul><li>目标: 清除未被标记的对象,回收内存空间</li><li>特点: 与应用线程并发执行,不会导致应用停顿</li></ul></li><li>并发重置 <ul><li>目标: 重置CMS内部的数据结构,为下一次垃圾回收做准备</li><li>特点: 与应用线程并发执行</li></ul></li></ol><h4 id="cms优点" tabindex="-1"><a class="header-anchor" href="#cms优点"><span>CMS优点</span></a></h4><p>CMS垃圾回收器具有以下优点:</p><ul><li><strong>低停顿时间</strong>：通过并发标记和并发清除，减少了应用线程的停顿时间。</li><li><strong>适合响应敏感型应用</strong>：如 Web 服务器、实时系统等。</li><li><strong>老年代回收效率高</strong>：适用于老年代对象存活率较高的场景。</li></ul><h4 id="cms-的缺点" tabindex="-1"><a class="header-anchor" href="#cms-的缺点"><span><strong>CMS 的缺点</strong></span></a></h4><ol><li><strong>CPU 资源占用高</strong>：并发标记和并发清除阶段会占用大量 CPU 资源，可能影响应用性能。</li><li><strong>内存碎片问题</strong>：CMS 使用标记-清除算法，不会压缩内存，可能导致内存碎片，从而触发 Full GC。</li><li><strong>浮动垃圾（Floating Garbage）</strong>：在并发清除阶段，应用线程可能产生新的垃圾对象，这些对象只能在下一次 GC 时回收。</li><li><strong>无法处理晋升失败</strong>：如果老年代空间不足，可能导致晋升失败，触发 Full GC。</li></ol><hr><h4 id="cms-的适用场景" tabindex="-1"><a class="header-anchor" href="#cms-的适用场景"><span><strong>CMS 的适用场景</strong></span></a></h4><ul><li><strong>响应时间敏感型应用</strong>：如 Web 服务器、实时系统。</li><li><strong>老年代对象存活率较高的应用</strong>：如缓存服务器、大数据处理系统。</li><li><strong>内存充足且 CPU 资源较多的环境</strong>：CMS 需要额外的 CPU 资源支持并发操作。</li></ul><h3 id="g1垃圾回收器" tabindex="-1"><a class="header-anchor" href="#g1垃圾回收器"><span>G1垃圾回收器</span></a></h3><h4 id="概述-1" tabindex="-1"><a class="header-anchor" href="#概述-1"><span>概述</span></a></h4><p>G1（Garbage-First）是一种面向 <strong>低停顿时间</strong> 和 <strong>高吞吐量</strong> 的垃圾回收器，适用于大内存（几十 GB 到几百 GB）的应用。G1 的设计目标是替代 CMS（Concurrent Mark-Sweep）回收器，解决 CMS 的内存碎片和长时间停顿问题。使用标记整理算法.</p><p>G1 的核心思想是将堆内存划分为多个 <strong>区域（Region）</strong>，并根据垃圾回收的优先级（Garbage-First）动态选择区域进行回收。</p><h4 id="核心特点" tabindex="-1"><a class="header-anchor" href="#核心特点"><span>核心特点</span></a></h4><ol><li><strong>区域化内存管理</strong>： <ul><li>堆内存被划分为多个大小相等的区域（Region），每个区域可以是 Eden、Survivor 或 Old 区域。</li><li>区域的大小可以通过参数 <code>-XX:G1HeapRegionSize</code> 设置（默认根据堆大小自动计算）。</li></ul></li><li><strong>分代收集</strong>： <ul><li>G1 仍然保留了分代的概念（新生代和老年代），但分代是逻辑上的，物理上由多个区域组成。</li></ul></li><li><strong>并发与并行</strong>： <ul><li>G1 充分利用多核 CPU 的优势，在多个阶段使用并发和并行操作，减少停顿时间。</li></ul></li><li><strong>可预测的停顿时间</strong>： <ul><li>通过参数 <code>-XX:MaxGCPauseMillis</code> 设置目标停顿时间（默认 200ms），G1 会尽量满足这一目标。</li></ul></li></ol><h4 id="回收分类" tabindex="-1"><a class="header-anchor" href="#回收分类"><span>回收分类:</span></a></h4><p>G1中提供了三种垃圾回收模式: YoungGC、Mixed GC和Full GC，在不同的条件下被触发。</p><ul><li>Young GC:回收 Eden 区和 Survivor 区的垃圾对象，需要短暂的 STW。</li><li>Mixed GC:回收老年代中垃圾较多的区域，需要 STW，但停顿时间可控。</li><li>Full GC : 当 G1 无法满足回收目标时，触发 Full GC，停顿时间较长。</li></ul><h4 id="回收流程-1" tabindex="-1"><a class="header-anchor" href="#回收流程-1"><span>回收流程</span></a></h4><p>G1工作流程分为以下几个阶段:</p><ul><li>初始标记</li><li>并发标记</li><li>最终标记 <ul><li>原始快照记录变更引用</li></ul></li><li>筛选回收</li></ul><h4 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h4><p>G1垃圾回收器优点:</p><ul><li>空间整合 <ul><li>CMS：“标记-清除”算法、内存碎片、若干次GC后进行一次碎片整理</li><li>G1将内存划分为一个个的region。内存的回收是以region作为基本单位的。Region之间是复制算法，但整体上实际可看作是标记-压缩算法，两种算法都可以避免内存碎片。这种特性有利于程序长时间运行，分配大对象时不会因为无法找到连续内存空间而提前触发下一次GC。尤其是当Java堆非常大的时候，G1的优势更加明显。</li></ul></li><li>可预测的停顿时间模型（即:软实时soft real-time) <ul><li><em>这是G1 相对于CMS 的另一大优势，G1除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为 M 毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒。</em></li></ul></li></ul><p>由于分区的原因，G1可以只选取部分区域进行内存回收，这样缩小了回收的范围，因此对于全局停顿情况的发生也能得到较好的控制。G1 跟踪各个Region里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的Region。保证了G1 收集器在有限的时间内可以获取尽可能高的收集效率。</p><h2 id="_3-3-内存分配策略" tabindex="-1"><a class="header-anchor" href="#_3-3-内存分配策略"><span>3.3.内存分配策略</span></a></h2><h3 id="动态年龄判断" tabindex="-1"><a class="header-anchor" href="#动态年龄判断"><span>动态年龄判断</span></a></h3><p>eden区对象进入老年代的年龄判断:</p><ul><li>动态年龄判断:一般情况下,如果在S区相同年龄的所有对象大小总和大于S区空间的一半,那么S区所有大于等于该年龄的对象可以直接进入老年代.</li><li>JVM参数设置年龄</li></ul><h3 id="空间分配担保" tabindex="-1"><a class="header-anchor" href="#空间分配担保"><span>空间分配担保</span></a></h3><p>在发生MinorGC之前,虚拟机会检查老年代最大连续可用空间是否大于新生代所有对象总空间,如果这个条件成立,则MinorGC是安全的.</p><h4 id="如果老年代空间不够用" tabindex="-1"><a class="header-anchor" href="#如果老年代空间不够用"><span>如果老年代空间不够用</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>-XX：HandlePromotionFailure</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果小于老年代,则检查该参数是否为true,表示会继续检查历次晋升到老年代的对象的平均大小是否小于老年代的连续空间</p><ul><li>​ 小于,可以发生MinorGC,尽管有可能空间不够,最后导致发生FullGC</li><li>大于,发生FullGC</li></ul><p>如果该参数设置为false,则直接进行FullGC</p><h1 id="四、类加载机制" tabindex="-1"><a class="header-anchor" href="#四、类加载机制"><span>四、类加载机制</span></a></h1><h2 id="_4-1-类加载过程" tabindex="-1"><a class="header-anchor" href="#_4-1-类加载过程"><span>4.1.类加载过程</span></a></h2><p>类加载机制过程分为以下几步</p><ol><li>加载类文件</li><li>连接:验证、准备、解析</li><li>初始化</li><li>使用</li><li>卸载</li></ol><h2 id="_4-2-类加载器" tabindex="-1"><a class="header-anchor" href="#_4-2-类加载器"><span>4.2.类加载器</span></a></h2><h3 id="类加载器种类" tabindex="-1"><a class="header-anchor" href="#类加载器种类"><span>类加载器种类</span></a></h3><p>Java中的类加载器分为以下四类：</p><ol><li><strong>Bootstrap ClassLoader（启动类加载器）</strong>： <ul><li>负责加载JVM核心类库（如<code>java.lang.*</code>），通常位于<code>jre/lib</code>目录下。</li><li>由C/C++实现，是JVM的一部分，不是Java类。</li><li>是唯一没有父类加载器的加载器。</li></ul></li><li><strong>Extension ClassLoader（扩展类加载器）</strong>： <ul><li>负责加载<code>jre/lib/ext</code>目录下的扩展类库。</li><li>是Java实现，父类加载器是<code>Bootstrap ClassLoader</code>。</li></ul></li><li><strong>Application ClassLoader（应用程序类加载器）</strong>： <ul><li>负责加载用户类路径（<code>classpath</code>）下的类。</li><li>是Java实现，父类加载器是<code>Extension ClassLoader</code>。</li><li>默认的类加载器。</li></ul></li><li><strong>自定义类加载器</strong>： <ul><li>用户可以继承<code>ClassLoader</code>类，实现自定义的类加载逻辑。</li><li>常用于热部署、模块化加载等场景。</li></ul></li></ol><h3 id="双亲委派模型" tabindex="-1"><a class="header-anchor" href="#双亲委派模型"><span>双亲委派模型</span></a></h3><ul><li><strong>定义</strong>：<br> 类加载器在加载类时，首先委托父类加载器尝试加载，只有当父类加载器无法加载时，才由自己加载。</li><li><strong>优点</strong>： <ul><li>避免类的重复加载。</li><li>保证核心类库的安全性，防止用户自定义类替换核心类（如<code>java.lang.String</code>）。</li></ul></li></ul><h3 id="打破双亲委派模型" tabindex="-1"><a class="header-anchor" href="#打破双亲委派模型"><span>打破双亲委派模型</span></a></h3><h4 id="如何打破双亲委派模型" tabindex="-1"><a class="header-anchor" href="#如何打破双亲委派模型"><span>如何打破双亲委派模型</span></a></h4><h4 id="tomcat-类加载机制" tabindex="-1"><a class="header-anchor" href="#tomcat-类加载机制"><span>Tomcat 类加载机制</span></a></h4><p>tomcat的类加载体系:</p><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>commonLoader：Tomcat最基本的类加载器，加载路径中的class可以被Tomcat容器本身以及各个Webapp访问；</li><li>catalinaLoader：Tomcat容器私有的类加载器，加载路径中的class对于Webapp不可见；</li><li>sharedLoader：各个Webapp共享的类加载器，加载路径中的class对于所有Webapp可见，但是对于Tomcat容器不可见；</li><li>WebappClassLoader：各个Webapp私有的类加载器，加载路径中的class只对当前Webapp可见；</li></ul><h5 id="如果tomcat-的-common-classloader-想加载-webapp-classloader-中的类-该怎么办" tabindex="-1"><a class="header-anchor" href="#如果tomcat-的-common-classloader-想加载-webapp-classloader-中的类-该怎么办"><span>如果tomcat 的 Common ClassLoader 想加载 WebApp ClassLoader 中的类，该怎么办？</span></a></h5><p>使用线程上下文类加载器实现，使用线程上下文加载器，可以让父类加载器请求子类加载器去完成类加载的动作</p><h1 id="五、并发原理" tabindex="-1"><a class="header-anchor" href="#五、并发原理"><span>五、并发原理</span></a></h1><h1 id="六、线程安全和锁优化" tabindex="-1"><a class="header-anchor" href="#六、线程安全和锁优化"><span>六、线程安全和锁优化</span></a></h1><h1 id="七、jvm参数设置" tabindex="-1"><a class="header-anchor" href="#七、jvm参数设置"><span>七、JVM参数设置</span></a></h1><h2 id="垃圾回收器选择" tabindex="-1"><a class="header-anchor" href="#垃圾回收器选择"><span>垃圾回收器选择</span></a></h2><p>jdk8默认垃圾回收器: Parallel Scavenge 和 Parallel Old</p><p>Parallel Scavenge追求高吞吐量，适合后台计算任务；而Parallel Old是其老年代版本，采用多线程的“标记-整理”算法。</p><p>开启CMS:-XX:+UseConcMarkSweepGC</p><h2 id="堆设置" tabindex="-1"><a class="header-anchor" href="#堆设置"><span>堆设置</span></a></h2><h3 id="堆内存和机器内存比例" tabindex="-1"><a class="header-anchor" href="#堆内存和机器内存比例"><span>堆内存和机器内存比例</span></a></h3><p>JVM 堆内存通常占用机器总内存的一部分，具体比例取决于应用的类型和机器的其他用途。以下是一个常见的分配建议：</p><table><thead><tr><th style="text-align:left;">机器总内存</th><th style="text-align:left;">JVM 堆内存建议</th><th style="text-align:left;">备注</th></tr></thead><tbody><tr><td style="text-align:left;">2GB</td><td style="text-align:left;">1GB</td><td style="text-align:left;">小内存机器，堆内存不宜过大，需为操作系统和其他进程预留空间。</td></tr><tr><td style="text-align:left;">4GB</td><td style="text-align:left;">2GB - 3GB</td><td style="text-align:left;">中等内存机器，堆内存可适当增加，但仍需预留足够空间。</td></tr><tr><td style="text-align:left;">8GB</td><td style="text-align:left;">4GB - 6GB</td><td style="text-align:left;">大内存机器，堆内存可分配较多，但仍需考虑其他进程和操作系统需求。</td></tr><tr><td style="text-align:left;">16GB</td><td style="text-align:left;">8GB - 12GB</td><td style="text-align:left;">高内存机器，适合内存密集型应用，堆内存可分配较大比例。</td></tr><tr><td style="text-align:left;">32GB+</td><td style="text-align:left;">16GB - 24GB</td><td style="text-align:left;">超大内存机器，堆内存可进一步增加，但需注意 GC 性能问题。</td></tr></tbody></table><h4 id="考虑操作系统和其他进程" tabindex="-1"><a class="header-anchor" href="#考虑操作系统和其他进程"><span><strong>考虑操作系统和其他进程</strong></span></a></h4><ul><li><strong>操作系统</strong>：需要为操作系统预留足够的内存（通常 1GB-2GB）。</li><li><strong>其他进程</strong>：如果机器上运行了其他进程（如数据库、缓存、监控工具等），需要为它们分配内存。</li><li><strong>Native 内存</strong>：JVM 除了堆内存外，还需要内存用于 Metaspace（类元数据）、线程栈、直接内存（Direct Buffer）等。</li></ul><h4 id="根据应用类型调整" tabindex="-1"><a class="header-anchor" href="#根据应用类型调整"><span><strong>根据应用类型调整</strong></span></a></h4><ul><li><strong>内存密集型应用</strong>（如大数据处理、缓存服务器）： <ul><li>堆内存可以分配较大比例（如机器总内存的 60%-70%）。</li><li>需要监控 GC 性能，避免 Full GC 导致的停顿。</li></ul></li><li><strong>CPU 密集型应用</strong>（如计算任务、实时处理）： <ul><li>堆内存可以分配较小比例（如机器总内存的 30%-50%）。</li><li>需要确保 CPU 资源充足，避免 GC 占用过多 CPU 时间。</li></ul></li></ul><h4 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践"><span>最佳实践</span></a></h4><ul><li><strong>避免过度分配</strong>：堆内存过大可能导致 GC 停顿时间过长，影响应用性能。</li><li><strong>预留足够空间</strong>：确保为操作系统和其他进程预留足够的内存，避免系统因内存不足而崩溃。</li><li><strong>动态调整</strong>：根据应用的运行情况动态调整堆内存大小，找到最佳配置。一般先设置为一半,然后再动态调整.</li></ul><h3 id="堆内存设置参数" tabindex="-1"><a class="header-anchor" href="#堆内存设置参数"><span>堆内存设置参数</span></a></h3><blockquote><ul><li><strong>-Xms</strong>：初始堆大小（如 <code>-Xms2G</code> 表示初始堆大小为 2GB）。</li><li><strong>-Xmx</strong>：最大堆大小（如 <code>-Xmx4G</code> 表示最大堆大小为 4GB）。</li></ul><p>一般xms和xmx设置为相同数值</p></blockquote><h4 id="老年代、新生代设置" tabindex="-1"><a class="header-anchor" href="#老年代、新生代设置"><span>老年代、新生代设置</span></a></h4><p>在 JVM 中，新生代和老年代的默认比例取决于使用的垃圾回收器。以下是一些常见的默认设置：</p><ul><li><strong>新生代与老年代比例</strong>：默认是 <code>1:2</code>，即新生代占堆内存的 1/3，老年代占 2/3。</li><li><strong>Eden 与 Survivor 比例</strong>：默认是 <code>8:1:1</code>，即 Eden 区占新生代的 80%，Survivor 区（S1 和 S2）各占 10%。</li></ul><p>设置参数,可以通过以下 JVM 参数调整堆内存中各区域的比例：</p><h5 id="新生代与老年代比例" tabindex="-1"><a class="header-anchor" href="#新生代与老年代比例"><span><strong>新生代与老年代比例</strong></span></a></h5><ul><li><strong>-XX:NewRatio</strong>：设置新生代与老年代的比例。 <ul><li>例如：<code>-XX:NewRatio=2</code> 表示新生代与老年代的比例为 1:2。</li><li>默认值：2（即新生代占 1/3，老年代占 2/3）。</li></ul></li></ul><h5 id="eden-与-survivor-比例" tabindex="-1"><a class="header-anchor" href="#eden-与-survivor-比例"><span><strong>Eden 与 Survivor 比例</strong></span></a></h5><ul><li><strong>-XX:SurvivorRatio</strong>：设置 Eden 区与 Survivor 区的比例。 <ul><li>例如：<code>-XX:SurvivorRatio=8</code> 表示 Eden 区与每个 Survivor 区的比例为 8:1。</li><li>默认值：8（即 Eden 区占 80%，每个 Survivor 区占 10%）。</li></ul></li></ul><h4 id="设置比例考虑事项" tabindex="-1"><a class="header-anchor" href="#设置比例考虑事项"><span><strong>设置比例考虑事项</strong></span></a></h4><h5 id="新生代与老年代比例-1" tabindex="-1"><a class="header-anchor" href="#新生代与老年代比例-1"><span><strong>新生代与老年代比例</strong></span></a></h5><ul><li><strong>内存密集型应用</strong>：如果应用创建大量短期对象，可以增加新生代的比例（如 <code>-XX:NewRatio=1</code>，即新生代占 1/2，老年代占 1/2）。</li><li><strong>长期存活对象较多的应用</strong>：如果应用有大量长期存活的对象，可以增加老年代的比例（如 <code>-XX:NewRatio=3</code>，即新生代占 1/4，老年代占 3/4）。</li></ul><h5 id="eden-与-survivor-比例-1" tabindex="-1"><a class="header-anchor" href="#eden-与-survivor-比例-1"><span><strong>Eden 与 Survivor 比例</strong></span></a></h5><ul><li><strong>短期对象较多的应用</strong>：如果应用创建大量短期对象，可以增加 Eden 区的比例（如 <code>-XX:SurvivorRatio=10</code>，即 Eden 区占 90%，每个 Survivor 区占 5%）。</li><li><strong>对象存活率较高的应用</strong>：如果对象在 Survivor 区存活率较高，可以增加 Survivor 区的比例（如 <code>-XX:SurvivorRatio=6</code>，即 Eden 区占 75%，每个 Survivor 区占 12.5%）。</li></ul>',148)]))}]]),r=JSON.parse('{"path":"/summary/java/jvm/jvm-basic.html","title":"JVM基础","lang":"zh-CN","frontmatter":{"description":"JVM基础 一、java对象 1.1.对象的内存布局 对象在内存中主要分为三块数据: 对象头、实例数据、对齐数据. 对象头数据结构 对齐数据解析 数组和非数组对象 1.2.对象的内存分配策略 java-object-memory-allocatejava-object-memory-allocate 标量替换 TLAB分配 TLAB介绍 TLAB全称:...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/notes-base/summary/java/jvm/jvm-basic.html"}],["meta",{"property":"og:site_name","content":"Offer收割机"}],["meta",{"property":"og:title","content":"JVM基础"}],["meta",{"property":"og:description","content":"JVM基础 一、java对象 1.1.对象的内存布局 对象在内存中主要分为三块数据: 对象头、实例数据、对齐数据. 对象头数据结构 对齐数据解析 数组和非数组对象 1.2.对象的内存分配策略 java-object-memory-allocatejava-object-memory-allocate 标量替换 TLAB分配 TLAB介绍 TLAB全称:..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-11T08:46:41.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-11T08:46:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JVM基础\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-11T08:46:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Jason\\",\\"url\\":\\"https://jason.com\\"}]}"]]},"git":{"createdTime":1744361201000,"updatedTime":1744361201000,"contributors":[{"name":"Jason Statham","username":"Jason Statham","email":"xpt_notes@163.com","commits":1,"url":"https://github.com/Jason Statham"}]},"readingTime":{"minutes":17.31,"words":5193},"filePathRelative":"summary/java/jvm/jvm-basic.md","localizedDate":"2025年4月11日","autoDesc":true}')},6995:(a,s)=>{s.A=(a,s)=>{const i=a.__vccOpts||a;for(const[a,e]of s)i[a]=e;return i}}}]);