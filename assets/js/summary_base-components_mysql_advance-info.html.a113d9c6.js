"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5182],{6497:(i,s,a)=>{i.exports=a.p+"assets/img/innodb.74e08616.png"},6995:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,n]of s)a[i]=n;return a}},7595:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>d,data:()=>p});var n=a(6254),e=a(6497);const l=a.p+"assets/img/doublewrite.ab992493.png",r={},d=(0,a(6995).A)(r,[["render",function(i,s){return(0,n.uX)(),(0,n.CE)("div",null,s[0]||(s[0]=[(0,n.Fv)('<h1 id="存储架构" tabindex="-1"><a class="header-anchor" href="#存储架构"><span>存储架构</span></a></h1><h2 id="innodb架构" tabindex="-1"><a class="header-anchor" href="#innodb架构"><span>Innodb架构</span></a></h2><figure><img src="'+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>innodb的架构整体来看,就是两层,一层缓存,一层数据文件.</p><p>缓存主要分为:</p><ul><li>Buffer pool <ul><li>索引缓存</li><li>Change buffer缓存</li></ul></li><li>Log buffer <ul><li>redo log buffer</li><li>undo log buffer</li></ul></li></ul><h2 id="缓存介绍" tabindex="-1"><a class="header-anchor" href="#缓存介绍"><span>缓存介绍</span></a></h2><h3 id="buffer-pool-的作用" tabindex="-1"><a class="header-anchor" href="#buffer-pool-的作用"><span>Buffer pool 的作用</span></a></h3><h4 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h4><p>Buffer Pool 是 InnoDB 存储引擎用于缓存数据页和索引页的内存区域，减少磁盘 I/O。</p><h4 id="内存结构" tabindex="-1"><a class="header-anchor" href="#内存结构"><span>内存结构</span></a></h4><p>Buffer pool的主要内容包括:</p><ul><li><p>多个缓存页(默认16kb/页)组成,使用链表和哈希表管理</p></li><li><p>数据包括: 数据页、索引页、插入缓冲、自适应哈希索引、锁信息</p></li></ul><h4 id="读写流程" tabindex="-1"><a class="header-anchor" href="#读写流程"><span>读写流程</span></a></h4><p>读流程:</p><ol><li>查询数据时，先检查 Buffer Pool 是否存在目标页。</li><li>存在则直接返回（缓存命中），否则从磁盘读取并缓存到 Buffer Pool。</li><li>如果是非唯一二级索引,还会查看change buffer是否存在该页的修改,如果有,将会触发merge动作,将change buffer 的数据合并到当前数据页,并将当前数据页标记为dirty 有刷脏页线程处理,并且当前change buffer 被标记为已应用,这样,在刷新change buffer 到磁盘时就可以不处理</li></ol><p>写流程: 涉及非唯一二级索引</p><ul><li>检查buffer pool 中是否存在该数据页 <ul><li>如果存在直接修改</li><li>否则进入change buffer 流程</li></ul></li><li>将操作封装成Insert Buffer Entry 存入change buffer</li><li>记录内容包括： <ul><li>索引页的物理位置（表空间 ID、页号）。</li><li>索引键值（如 <code>name=&#39;Alice&#39;</code>）。</li><li>操作类型（INSERT/UPDATE/DELETE）</li></ul></li><li>事务提交 <ul><li>写操作在 Change Buffer 中记录后，事务即可提交（无需等待索引页刷新到磁盘）。</li><li>同时生成对应的 redo log，确保 crash-safe。</li></ul></li></ul><h3 id="change-buffer" tabindex="-1"><a class="header-anchor" href="#change-buffer"><span>change buffer</span></a></h3><h4 id="什么是change-buffer" tabindex="-1"><a class="header-anchor" href="#什么是change-buffer"><span>什么是change buffer</span></a></h4><p>change buffer 的定义:</p><ul><li>是 InnoDB 存储引擎的内存组件，属于 Buffer Pool 的一部分，用于缓存对<strong>非唯一二级索引页</strong>的写操作（INSERT/UPDATE/DELETE）。</li><li>设计目标：减少写操作时的随机 I/O（避免立即读取未在 Buffer Pool 中的索引页）。</li></ul><p>适用条件</p><ul><li>仅适用于<strong>非唯一二级索引</strong>（UNIQUE 索引因需立即校验唯一性，不使用 Change Buffer）。</li><li>索引页不在 Buffer Pool 中时触发缓存机制。</li></ul><h4 id="change-buffer-的工作流程" tabindex="-1"><a class="header-anchor" href="#change-buffer-的工作流程"><span>change buffer 的工作流程</span></a></h4><p>上面的读写流程已经介绍</p><h4 id="change-buffer的合并机制" tabindex="-1"><a class="header-anchor" href="#change-buffer的合并机制"><span>change buffer的合并机制</span></a></h4><ol><li><p><strong>触发时机</strong></p><ul><li><p>索引页被读取到 Buffer Pool 时</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 查询触发索引页读取，合并 Change Buffer 中的操作</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> users </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;Alice&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>后台线程定期合并</p><ul><li>由 <code>page_cleaner</code> 线程按 <code>innodb_io_capacity</code> 控制的速率合并。</li></ul></li><li><p>刷新脏页时</p><ul><li>当索引页因脏页刷新机制被写入磁盘前，必须先合并 Change Buffer 中的操作。</li></ul></li></ul></li><li><p><strong>合并流程</strong></p><ul><li>从磁盘读取目标索引页到 Buffer Pool。</li><li>将 Change Buffer 中针对该页的所有操作按顺序应用到索引页。</li><li>标记索引页为脏页，后续按脏页刷新策略写入磁盘。</li></ul></li></ol><h4 id="change-buffer-的参数优化" tabindex="-1"><a class="header-anchor" href="#change-buffer-的参数优化"><span>change buffer 的参数优化</span></a></h4><p>参考mysql优化</p><h3 id="doublewrite-buffer-两次写" tabindex="-1"><a class="header-anchor" href="#doublewrite-buffer-两次写"><span>Doublewrite buffer 两次写</span></a></h3><h4 id="原理图" tabindex="-1"><a class="header-anchor" href="#原理图"><span>原理图</span></a></h4><figure><img src="'+l+'" alt="doublewrite" tabindex="0" loading="lazy"><figcaption>doublewrite</figcaption></figure><p>doublewrite 的结构分为两部分:</p><ul><li>buffer pool 中的doublewrite buffer 2M大小</li><li>共享表空间中的doublewrite文件也是2M大小</li></ul><h4 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理"><span>工作原理</span></a></h4><p>当要将buffer pool 中的脏页数据刷新到磁盘时,由于数据页大小一般为16kb,磁盘页大小有4k,所以一个数据页对应4个磁盘页,为了保证刷新的原子性,避免部分成功.</p><ul><li>第一步先将buffer pool 的数据页copy 到 doublewrite buffer中,然后调用fsync函数,将这些数据分两次刷新到doublewrite 磁盘文件</li><li>第二步开始,执行buffer pool脏页刷新到磁盘各个表空间文件</li></ul><h4 id="与redo-log协作" tabindex="-1"><a class="header-anchor" href="#与redo-log协作"><span>与redo log协作</span></a></h4><p>redo log 只是记录物理页的修改,double wirte保存了损坏的物理页备份.</p><p>所有修复数据时,先用double write修复物理页,然后使用redo log 修复修改的数据.</p><h2 id="索引" tabindex="-1"><a class="header-anchor" href="#索引"><span>索引</span></a></h2><h3 id="索引简介" tabindex="-1"><a class="header-anchor" href="#索引简介"><span>索引简介</span></a></h3><p>InnoDB存储引擎支持以下几种常见的索引:</p><ul><li>B+树索引</li><li>全文索引</li><li>哈希索引</li></ul><p>InnoDB支持的哈希索引是自适应哈希索引.不能够指定哈希索引.</p><p><strong>B+树索引是一个多路平衡树,并且索引只能定位到记录所在的页不是在行.</strong></p><h3 id="索引的结构" tabindex="-1"><a class="header-anchor" href="#索引的结构"><span>索引的结构</span></a></h3><h4 id="b-树" tabindex="-1"><a class="header-anchor" href="#b-树"><span>B+树</span></a></h4><h4 id="聚簇索引" tabindex="-1"><a class="header-anchor" href="#聚簇索引"><span>聚簇索引</span></a></h4><p>聚簇索引的定义:</p><ul><li>使用记录主键值的大小进行记录和页的排序,包含如下三个意思 <ul><li>页内数据有序:页内的记录是按照主键的大小顺序排成一个单向链表</li><li>页之间有序: 各个存放用户记录的页也是根据页中用户记录的主键大小顺序排成一个双向链表</li><li>目录项页有序: 存放目录项记录的页分为不同的层次,在同一层次中的页也是根据页中目录项记录的主键大小顺序排成一个双向链表</li></ul></li><li>B+树的叶子节点存储的是完整的用户记录 <ul><li>完整记录即该记录的所有列和隐藏列</li></ul></li></ul><h4 id="二级索引和联合索引" tabindex="-1"><a class="header-anchor" href="#二级索引和联合索引"><span>二级索引和联合索引</span></a></h4><p>二级索引和联合索引我认为可以理解为一个,只不过二级索引一般是单列,联合索引是多列.</p><p>数据结构和聚簇索引一样</p><p>只不过有以下区别:</p><ul><li>搜索key由主键变成了索引列</li><li>排序是按照索引列的值进行排序如 index(a,b,c)先按a排序,再按b排序,再按c排序</li></ul><h4 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h4><ul><li>索引的根页面是不变的</li><li>二级索引、联合索引的目录项的值是唯一的,包含了主键值,如索引(a,b) 如果再来了a,b相同的值如何查询,所以排序时加上了主键id,a,b相同再根据主键id排列.</li><li>一个页面最少有两条记录</li></ul><h3 id="索引的使用" tabindex="-1"><a class="header-anchor" href="#索引的使用"><span>索引的使用</span></a></h3><h4 id="创建索引的建议" tabindex="-1"><a class="header-anchor" href="#创建索引的建议"><span>创建索引的建议</span></a></h4><p>创建索引时应考虑以下内容</p><ul><li><p>索引列的区分度,参考Cardinality</p></li><li><p>只为搜索、排序、分组的列创建索引</p></li><li><p>列的类型尽量小</p></li><li><p>索引字符串值的前缀</p></li><li><p>让主键自己插入索引,自己定义业务主键</p></li><li><p>索引列在表达式中单独存在</p></li><li><p>注意索引的冗余和重复</p></li></ul><h4 id="索引的适用条件" tabindex="-1"><a class="header-anchor" href="#索引的适用条件"><span>索引的适用条件</span></a></h4><p>索引的适用条件,以索引 idx_a(a,b,c)</p><ul><li>全值匹配,如a =1 ,b=2,c=3 和顺序无关</li><li>最左匹配原则: a = 1 或者 a=1 ,b=2</li><li>匹配列前缀 like &#39;a%&#39;</li><li>匹配范围</li><li>精确匹配某一列并范围匹配另外一列</li><li>排序 按索引列的排序查找</li><li>分组,按照索引列进行分组查询</li></ul><p>索引排序不适用的情况</p><ul><li><p>ASC、DESC混用</p></li><li><p>where条件存在非索引列</p></li><li><p>排序列不是同一个索引</p></li><li><p>使用复杂表达式</p></li></ul><h5 id="最左列匹配原则" tabindex="-1"><a class="header-anchor" href="#最左列匹配原则"><span>最左列匹配原则:</span></a></h5><p>示例: 假如我表post的索引 idx1(userId,postStatus,postType ,parentPostId)</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>查询语句:</span></span>\n<span class="line"><span>explain select * from post where userId= 1 and postType= 10;</span></span>\n<span class="line"><span>是否走索引</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[</span></span>\n<span class="line"><span>  {</span></span>\n<span class="line"><span>    &quot;id&quot;: 1,</span></span>\n<span class="line"><span>    &quot;select_type&quot;: &quot;SIMPLE&quot;,</span></span>\n<span class="line"><span>    &quot;table&quot;: &quot;post&quot;,</span></span>\n<span class="line"><span>    &quot;partitions&quot;: null,</span></span>\n<span class="line"><span>    &quot;type&quot;: &quot;ref&quot;,</span></span>\n<span class="line"><span>    &quot;possible_keys&quot;: &quot;idx1,idx2&quot;,</span></span>\n<span class="line"><span>    &quot;key&quot;: &quot;idx1&quot;,</span></span>\n<span class="line"><span>    &quot;key_len&quot;: &quot;4&quot;,</span></span>\n<span class="line"><span>    &quot;ref&quot;: &quot;const&quot;,</span></span>\n<span class="line"><span>    &quot;rows&quot;: 2,</span></span>\n<span class="line"><span>    &quot;filtered&quot;: 10,</span></span>\n<span class="line"><span>    &quot;Extra&quot;: &quot;Using index condition&quot;</span></span>\n<span class="line"><span>  }</span></span>\n<span class="line"><span>]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是执行了explain的结果,我个人理解是走了索引.并且使用了ICP(Using index condition)</p><h5 id="匹配范围值" tabindex="-1"><a class="header-anchor" href="#匹配范围值"><span>匹配范围值</span></a></h5><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>查询语句:</span></span>\n<span class="line"><span>explain select * from post where userId&gt;10 and userId&lt;100 and postType= 10;</span></span>\n<span class="line"><span>是否走索引</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>explain情况和上面相同,也是ICP</p><h4 id="cardinality" tabindex="-1"><a class="header-anchor" href="#cardinality"><span>Cardinality</span></a></h4><h5 id="定义-1" tabindex="-1"><a class="header-anchor" href="#定义-1"><span>定义:</span></a></h5><p>Cardinality 表示索引中唯一值的数量，反映字段的 “区分度”。例如，若字段 <code>id</code> 有 1000 个唯一值，则其 Cardinality 为 1000。</p><h5 id="核心作用" tabindex="-1"><a class="header-anchor" href="#核心作用"><span>核心作用:</span></a></h5><ul><li>帮助 MySQL 优化器判断索引的效率，决定是否使用索引及使用方式。</li><li>基数越高（唯一值越多），索引过滤效果越好，查询效率越高。</li></ul><h5 id="查看方式" tabindex="-1"><a class="header-anchor" href="#查看方式"><span>查看方式</span></a></h5><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">EXPLAIN </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> table_name </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> column </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;value&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">在输出结果的 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">Key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 列（使用的索引）和 Key_len 列（索引长度）旁，</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">Rows</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 列会显示优化器估算的扫描行数，其估算基于 Cardinality。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">show </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">index</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> table名称</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 查看指定表的所有索引基数</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> TABLE_NAME, INDEX_NAME, COLUMN_NAME, CARDINALITY</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> INFORMATION_SCHEMA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">STATISTICS</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> TABLE_NAME </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;table_name&#39;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ORDER BY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> CARDINALITY </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">DESC</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以查看该表中各个索引的区分度</p><h3 id="回表" tabindex="-1"><a class="header-anchor" href="#回表"><span>回表</span></a></h3><p>回表的含义:通过索引查询到主键,然后再通过聚簇索引查询到记录的</p><p>覆盖索引:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>如果我们不需要全部记录,而只需要索引列的值,就尽量不要写select * from table where  索引值匹配</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>而是 select 索引列 from table where 索引值匹配</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mysql索引的优化" tabindex="-1"><a class="header-anchor" href="#mysql索引的优化"><span>MySQL索引的优化</span></a></h3><h4 id="icp-using-index-condition" tabindex="-1"><a class="header-anchor" href="#icp-using-index-condition"><span>ICP(Using index condition)</span></a></h4><p><strong>&quot;Using index condition&quot;</strong> 是 MySQL 5.6 引入的一项索引优化技术，也称为<strong>索引条件下推（Index Condition Pushdown, ICP）</strong>。其核心作用是减少回表次数，提升查询效率。</p><p>传统查询:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>1. 通过索引定位主键值</span></span>\n<span class="line"><span>2. 回表（通过主键）读取完整数据行</span></span>\n<span class="line"><span>3. 过滤剩余条件（如WHERE中的非索引列条件）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用ICP查询</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>1. 通过索引定位主键值</span></span>\n<span class="line"><span>2. **在索引中先过滤部分条件**（如索引包含的列）</span></span>\n<span class="line"><span>3. 仅对满足条件的记录回表读取完整数据</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="icp-适用条件" tabindex="-1"><a class="header-anchor" href="#icp-适用条件"><span><strong>ICP 适用条件</strong></span></a></h5><ol><li><strong>索引覆盖部分条件</strong>： <ul><li>查询条件中部分字段存在于索引中，部分不在。</li><li>示例：索引为 <code>(a, b)</code>，查询 <code>WHERE a=1 AND c&gt;10</code>（<code>c</code> 不在索引中）。</li></ul></li><li><strong>二级索引</strong>： <ul><li>聚簇索引（主键）已包含所有列，ICP 对其无优化效果。</li><li>仅对二级索引（如普通索引、唯一索引）生效。</li></ul></li><li><strong>存储引擎</strong>： <ul><li>仅 InnoDB 和 MyISAM 支持 ICP，Memory 引擎不支持。</li></ul></li></ol><h5 id="、explain-中的-icp-标识" tabindex="-1"><a class="header-anchor" href="#、explain-中的-icp-标识"><span><strong>、EXPLAIN 中的 ICP 标识</strong></span></a></h5><p>通过 <code>EXPLAIN</code> 查看执行计划，若出现 <strong>&quot;Using index condition&quot;</strong>，表示启用了 ICP：</p><h3 id="myisam中的索引" tabindex="-1"><a class="header-anchor" href="#myisam中的索引"><span>MyISAM中的索引</span></a></h3><p>MyISAM中索引特点:</p><ul><li>索引和数据分开,即使是主键</li><li>索引里面存储主键+行号</li><li>数据文件里面行号+记录</li></ul><h2 id="事务" tabindex="-1"><a class="header-anchor" href="#事务"><span>事务</span></a></h2><h3 id="事务简介" tabindex="-1"><a class="header-anchor" href="#事务简介"><span>事务简介</span></a></h3><h4 id="定义-2" tabindex="-1"><a class="header-anchor" href="#定义-2"><span>定义</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span></span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>数据库事务（Database Transaction）是一组逻辑上的数据库操作单元，这些操作要么全部成功执行，要么全部失败回滚，确保数据库从一个一致性状态转换到另一个一致性状态。事务是数据库管理系统（DBMS）实现数据完整性和一致性的核心机制，尤其在多用户并发访问或系统故障时，能保证数据的可靠性。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="事务具有以下四大特性-aicd" tabindex="-1"><a class="header-anchor" href="#事务具有以下四大特性-aicd"><span>事务具有以下四大特性:AICD</span></a></h4><table><thead><tr><th><strong>特性</strong></th><th><strong>英文全称</strong></th><th><strong>核心含义</strong></th><th><strong>MySQL 实现方式</strong></th></tr></thead><tbody><tr><td><strong>原子性（Atomicity）</strong></td><td>Atomicity</td><td>事务中的操作要么全部成功，要么全部回滚，不存在中间状态。</td><td>- 通过 undo 日志记录事务操作前的状态，回滚时恢复数据； - InnoDB 的事务回滚机制。</td></tr><tr><td><strong>一致性（Consistency）</strong></td><td>Consistency</td><td>事务执行前后，数据库始终满足完整性约束（如主键唯一、外键关联等）。</td><td>- 结合原子性、隔离性和持久性共同保证； - 依赖数据库模式（Schema）的约束定义。</td></tr><tr><td><strong>隔离性（Isolation）</strong></td><td>Isolation</td><td>多个事务并发执行时，彼此互不干扰，避免数据读取或修改冲突。</td><td>- 通过锁机制（共享锁 / 排他锁）和 MVCC（多版本并发控制）实现； - 支持 4 种隔离级别。</td></tr><tr><td><strong>持久性（Durability）</strong></td><td>Durability</td><td>事务提交后，数据修改永久保存，即使系统故障也不丢失。</td><td></td></tr></tbody></table><h4 id="mysql实现acid的原理" tabindex="-1"><a class="header-anchor" href="#mysql实现acid的原理"><span>MySQL实现ACID的原理</span></a></h4><ul><li>原子性 <ul><li>undo log日志</li><li>事务日志机制</li></ul></li><li>一致性 <ul><li>约束校验: DDL定义的约束</li><li>原子性、隔离性、持久性的结果</li></ul></li><li>隔离性 <ul><li>MVCC</li><li>锁</li></ul></li><li>持久性 <ul><li>WAL: 事务提交前,先将redo日志写入磁盘,再修改数据页</li><li>redo log日志:记录数据修改后的新值,奔溃恢复使用</li><li>刷盘策略</li></ul></li></ul><p>Undo log 和Redo log的区别:</p><ul><li>undo log保存修改前的数据,保证数据原子性问题</li><li>redo log保存了事务中的修改情况,即修改之后的样子,保证数据持久性问题</li></ul><h3 id="redo-log-undo-log" tabindex="-1"><a class="header-anchor" href="#redo-log-undo-log"><span>Redo log &amp; undo log</span></a></h3><h4 id="工作原理-1" tabindex="-1"><a class="header-anchor" href="#工作原理-1"><span>工作原理</span></a></h4><p>![redo log &amp; undo log](images/redo log &amp; undo log.jpg)</p><h4 id="redo-log-工作原理" tabindex="-1"><a class="header-anchor" href="#redo-log-工作原理"><span>Redo log 工作原理</span></a></h4><p>![redo log](images/redo log.png)</p><p>首先redo的工作我理解可以分为三大步:</p><ul><li>生成redo log 记录,并写入redo log block (redo log buffer)</li><li>将redo log buffer 中的block的记录 刷新到磁盘,记录到物理日志里面</li><li>Checkpoint 决定那些redo log buffer 和redo log 的内容是可以覆盖的</li></ul><h5 id="三个lsn" tabindex="-1"><a class="header-anchor" href="#三个lsn"><span>三个LSN</span></a></h5><p>这三步会生成三个数据: LSN, flushed_to_disk_lsn , checkpoint_lsn</p><ul><li>LSN:代表当前系统中最大的redo log record 序号</li><li>Flushed_to_disk_lsn 代表已经写入到磁盘的最大lsn序号</li><li>checkpoint_lsn代表buffer pool中脏页刷新到磁盘,最大的lsn序号</li></ul><p>lsn和flushed_to_disk_lsn好理解一些,checkpoint_lsn说明如下:</p><p>假如当前事务trx1 ,生成的redo log 记录为redo1 ,修改对应的buffer pool 数据页为page-a,这时lsn假如为9716,假如这时flush链表为空,</p><p>则会生成一个控制块a,其中o_m代表页a最早的修改lsn,并插入到flush链表</p><p>后续会发生如下情况:</p><ul><li>事务trx2 并发修改数据页a,lsn为9916,修改完后,发现链表有页a对应的控制块,则直接更新n_m即最新的lsn为9916</li><li>事务trx3生成redo2,修改buffer pool 数据页b,这时lsn = 10010,则数据页b的控制块b的o_m=10010,并将b插入到a的前面</li><li>依次类推</li></ul><p>后台线程会对flush链表进行刷脏操作,假如把页a的数据刷新到磁盘数据文件,这时a的控制块就没用,这时redo log的checkpoint_lsn就变成了9716,</p><p>因为flush链表是有序的,所以小于9716的数据已经被刷新到磁盘了,所以对应的redo log也可以被覆盖了,</p><p>随着后台线程不停的刷新flush链表,checkpoint_lsn会越来越接近flushed_to_disk_lsn.</p><h5 id="redo-log刷盘时机" tabindex="-1"><a class="header-anchor" href="#redo-log刷盘时机"><span>redo log刷盘时机</span></a></h5><ul><li>Log buffer 空间不足时</li><li>事务提交时</li><li>后台线程</li><li>政策关闭服务器</li></ul><blockquote><p>其中事务提交时的刷盘策略选择:</p><p>innodb_flush_log_at_trx_commit的用法 我们前边说为了保证事务的持久性，用户线程在事务提交时需要将该事务执行过程中产生的所有redo日志都刷新到磁盘上。这一条要求太狠了，会很明显的降低数据库性能。如果有的同学对事务的持久性要求不是那么强烈的话，可以选择修改一个称为innodb_flush_log_at_trx_commit的系统变量的值，</p><p>该变量有3个可选的值:</p><p>0:当该系统变量值为0时，表示在事务提交时不立即向磁盘中同步redo日志，这个任务是交给后台线程做的。 这样很明显会加快请求处理速度，但是如果事务提交后服务器挂了，后台线程没有及时将redo日志刷新到磁盘，那么该事务对页面的修改会丢失。</p><p>1:当该系统变量值为1时，表示在事务提交时需要将redo日志同步到磁盘，可以保证事务的持久性。1也是innodb_flush_log_at_trx_commit的默认值。</p><p>2:当该系统变量值为2时，表示在事务提交时需要将redo日志写到操作系统的缓冲区中，但并不需要保证将日志真正的刷新到磁盘。 这种情况下如果数据库挂了，操作系统没挂的话，事务的持久性还是可以保证的，但是操作系统也挂了的话，那就不能保证持久性了。</p></blockquote><h2 id="锁" tabindex="-1"><a class="header-anchor" href="#锁"><span>锁</span></a></h2><h2 id="优化点" tabindex="-1"><a class="header-anchor" href="#优化点"><span>优化点</span></a></h2><p>除了在缓存层面,innnodb做的优化,还有以下优化点.</p><h3 id="异步io" tabindex="-1"><a class="header-anchor" href="#异步io"><span>异步IO</span></a></h3><h2 id="刷新临近页" tabindex="-1"><a class="header-anchor" href="#刷新临近页"><span>刷新临近页</span></a></h2><p>Flush Neighbor Page(刷新临近页):当刷新一个脏页时,Innodb 存储引擎会检测该页所在区的所有页,如果是脏页,那么一起刷新.这样做的好处是通过AIO将多个IO写入操作合并成一个IO操作.</p><p>但是有两个问题可以考虑:</p><ul><li>是不是可能将不怎么脏的页进行写入,之后该页又很快变脏页</li><li>固态硬盘有着较高的IOPS,是否还需要这个特性</li></ul><p>InnoDB存储引擎从1.2.x版本提供Innodb_flush_neighbors参数可以关闭该功能</p><ol><li></li></ol>',143)]))}]]),p=JSON.parse('{"path":"/summary/base-components/mysql/advance-info.html","title":"存储架构","lang":"zh-CN","frontmatter":{"description":"存储架构 Innodb架构 innodb的架构整体来看,就是两层,一层缓存,一层数据文件. 缓存主要分为: Buffer pool 索引缓存 Change buffer缓存 Log buffer redo log buffer undo log buffer 缓存介绍 Buffer pool 的作用 定义 Buffer Pool 是 InnoDB 存储...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/notes-base/summary/base-components/mysql/advance-info.html"}],["meta",{"property":"og:site_name","content":"Offer收割机"}],["meta",{"property":"og:title","content":"存储架构"}],["meta",{"property":"og:description","content":"存储架构 Innodb架构 innodb的架构整体来看,就是两层,一层缓存,一层数据文件. 缓存主要分为: Buffer pool 索引缓存 Change buffer缓存 Log buffer redo log buffer undo log buffer 缓存介绍 Buffer pool 的作用 定义 Buffer Pool 是 InnoDB 存储..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-24T14:35:04.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-24T14:35:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"存储架构\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-24T14:35:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Jason\\",\\"url\\":\\"https://jason.com\\"}]}"]]},"git":{"createdTime":1744361201000,"updatedTime":1748097304000,"contributors":[{"name":"Jason Statham","username":"Jason Statham","email":"xpt_notes@163.com","commits":2,"url":"https://github.com/Jason Statham"}]},"readingTime":{"minutes":13.61,"words":4082},"filePathRelative":"summary/base-components/mysql/advance-info.md","localizedDate":"2025年4月11日","autoDesc":true}')}}]);