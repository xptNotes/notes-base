"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4184],{4801:(e,i,s)=>{s.r(i),s.d(i,{comp:()=>l,data:()=>t});var a=s(6254);const n={},l=(0,s(6995).A)(n,[["render",function(e,i){return(0,a.uX)(),(0,a.CE)("div",null,i[0]||(i[0]=[(0,a.Fv)('<h1 id="一、redis复制原理" tabindex="-1"><a class="header-anchor" href="#一、redis复制原理"><span>一、Redis复制原理</span></a></h1><p>Redis的复制功能包括数据同步(sync)和命令传播(command propagate)两个操作</p><h2 id="数据同步-sync和psync命令" tabindex="-1"><a class="header-anchor" href="#数据同步-sync和psync命令"><span>数据同步-sync和psync命令</span></a></h2><h3 id="sync命令执行流程" tabindex="-1"><a class="header-anchor" href="#sync命令执行流程"><span>sync命令执行流程</span></a></h3><ul><li>从服务器向主服务器发送 sync命令</li><li>主服务器收到sync命令,开始执行bgsave命令,生成rdb文件,并使用一个缓冲区记录从现在开始执行的所有写命令</li><li>当主服务器bgsave命令执行完毕后,将rdb文件发送给从服务器,从服务器接收并载入rdb文件,将自己的数据库状态更新至主服务器执行bgsave命令时的数据库状态</li><li>主服务器将记录在缓冲区里面的所有命令发送给从服务器,从服务器执行这些命令,将自己的数据库状态更新至主服务器数据库当前所处的状态</li><li>同步完成后,将执行命令转播流程,主服务器执行完写请求,发送到从服务器</li></ul><p>sync命令是2.8版本之前的同步方式.</p><p>sync执行的时机:</p><ul><li>初次复制: 从服务器以前没有复制过主服务器</li><li>断线后重新复制:因为网络问题,从服务器和主服务器短时间断开,然后重新连接,复制主服务器数据.</li></ul><p>存在问题:</p><ul><li>断开重连后,可能不需要同步太多数据,却生成了RDB,全量同步,浪费资源.</li></ul><h3 id="psync命令" tabindex="-1"><a class="header-anchor" href="#psync命令"><span>psync命令</span></a></h3><p>2.8版本之后,开始支持psync命令</p><h4 id="psync命令基础" tabindex="-1"><a class="header-anchor" href="#psync命令基础"><span>psync命令基础</span></a></h4><p>psync命令包括: 全量同步 和 部分同步</p><ul><li>全量同步:用于处理初次复制的状况,执行步骤与sync相同</li><li>部分同步:处理断线后重复复制的情况,当从服务器在断线后重新连接主服务器时,如果条件允许,主服务器可以将主从服务器连接断开期间执行的命令发送给从服务器,从服务器只要接收并执行这些写命令,就可以将数据库更新至主服务器当前所处的状态</li></ul><p>部分同步的数据结构:</p><ul><li>主服务器的复制偏移量(replication offset) 和 从服务器的复制偏移量</li><li>主服务器的复制积压缓冲区(replication backlog)</li><li>服务器的运行id (run ID)</li></ul><p><strong>复制偏移量:</strong></p><ul><li>主服务器每次向从服务器传播N个字节的数据时,将自己的复制偏移量的加上N</li><li>从服务器每次收到主服务器传播来的N个字节的数据时,就将复制偏移量的值加上N</li></ul><p><strong>复制积压缓冲区</strong></p><ul><li>是一个固定长度的,先进先出的队列</li><li>为每个字节记录相应的复制偏移量</li></ul><p><strong>复制积压缓冲区的大小设置</strong></p><ul><li>复制积压缓冲区大小默认为1mb</li><li>为了安全起见,可以设置为: 2 * second * wrtie_size_per_second <ul><li>second : 主从断线重连时间</li><li>wrtie_size_per_second : 每秒主服务器的写请求大小</li></ul></li></ul><p><strong>服务器运行ID</strong></p><ul><li>主从服务器在运行时都会有自己的运行id</li><li>运行ID在服务器启动时自动生成,有40个随机的十六进制组成</li><li>从服务器在重启后,会向之前连接的主服务器发送之前保存的运行ID</li></ul><h4 id="psync命令实现" tabindex="-1"><a class="header-anchor" href="#psync命令实现"><span>psync命令实现</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>psync &lt;runid&gt; &lt;offset&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>psync命令工作流程</strong><br> 完整复制-网络中断-重复复制<br> 从服务器: 127.0.0.1 6378 ,主服务器: 127.0.0.1 6379</p><ol><li>客户端向服务器 6378 发送命令, slaveof 127.0.0.1 6379</li><li>6378 从服务器 会向 6379 主服务器发送 psync ? -1 命令</li><li>主服务器收到后,执行bgsave ,生成rdb文件</li><li>主服务器向 从服务器返回 +FULLRESYNC 主服务器运行ID 当前复制偏移量比如10001</li><li>rdb生成完成后,主服务器发送给从服务器,从服务器加载数据</li><li>主服务器将复制缓冲区数据发送给从服务器执行,两者达到一致状态</li><li>运行一段时间后,两者偏移量相同,假如都为20000</li><li>从服务器断开</li><li>从服务器重新连接主服务器,并进行对主服务器复制,发送请求: psync 之前保存的主服务器运行ID 20000</li><li>主服务器收到请求后,校验运行id,如果相同,再校验 当前收到的offset是否在复制积压缓冲区内如果存在,则向从服务器返回+continue 表示将于从服务器执行部分同步操作,否则校验失败,将执行全量同步</li><li>部分同步操作后,主从再次回到一致状态</li></ol><p>存在问题:主从切换后如何解决?</p><h4 id="psync2-0方案" tabindex="-1"><a class="header-anchor" href="#psync2-0方案"><span>psync2.0方案</span></a></h4><p>Redis4.0版本,给出pysnc2.0版本,优化了,在redis 主从切换后,runid和offset变化,导致全量同步数据的问题,使得在主从切换之后,从服务器仍然可以继续增量同步.</p><p>如何实现:</p><p>psync2.0版本抛弃了服务器运行ID，采用了replid和replid2来代替，其中replid存储的是当前主服务器的运行ID，replid2保存的是上一个主服务器运行ID。</p><ul><li>复制偏移量（replication offset）</li><li>积压缓冲区（replication backlog）</li><li>主服务器运行id（replid）</li><li>上个主服务器运行id（replid2）</li></ul><p>通过replid和replid2我们可以解决主服务器切换时，增量同步的问题：</p><ul><li>如果replid等于当前主服务器的运行id，那么判断同步方式增量/全量同步</li><li>如果replid不相等，则判断replid2是否相等（是否同属于上一个主服务器的从服务器），如果相等，仍然可以选择增量/全量同步，如果不相等则只能进行全量同步。</li></ul><h1 id="二、redis哨兵集群" tabindex="-1"><a class="header-anchor" href="#二、redis哨兵集群"><span>二、Redis哨兵集群</span></a></h1><h2 id="哨兵工作原理" tabindex="-1"><a class="header-anchor" href="#哨兵工作原理"><span>哨兵工作原理</span></a></h2><p>哨兵工作原理如下:</p><ul><li>每个哨兵节点每10秒会向主节点和从节点发送info命令,获取最新的主从结构,在配置时,可以只配置监视主节点,有主节点获取从节点信息</li><li>每隔哨兵节点每2秒会向Redis数据节点指定频道上发送该哨兵节点对于主节点的判断以及当前哨兵的信息.同时每个哨兵也会订阅该频道来获取其他哨兵的判断信息和哨兵节点信息,其就是通过pub/sub来完成</li><li>每隔1秒,哨兵会向主节点、从节点、其他哨兵发送ping做心跳检测, 这也是哨兵判断其他节点是否正常的依据</li></ul><h2 id="故障发现和转移" tabindex="-1"><a class="header-anchor" href="#故障发现和转移"><span>故障发现和转移</span></a></h2><h3 id="主观下线和客观下线" tabindex="-1"><a class="header-anchor" href="#主观下线和客观下线"><span>主观下线和客观下线</span></a></h3><h3 id="故障转移处理" tabindex="-1"><a class="header-anchor" href="#故障转移处理"><span>故障转移处理</span></a></h3><h1 id="三、redis-cluster" tabindex="-1"><a class="header-anchor" href="#三、redis-cluster"><span>三、Redis Cluster</span></a></h1><p>优秀博客:</p><p><a href="https://juejin.cn/post/7097521572885299214?searchId=2025031723472888A242785CE0360F882F#heading-16" target="_blank" rel="noopener noreferrer">Redis综述篇：与面试官彻夜长谈Redis缓存、持久化、淘汰机制、哨兵、集群底层原理！</a></p>',47)]))}]]),t=JSON.parse('{"path":"/summary/base-components/redis/advance/redis-distributed.html","title":"Redis分布式解决方案","lang":"zh-CN","frontmatter":{"title":"Redis分布式解决方案","category":"Redis","tag":["Redis集群"],"head":[["meta",{"name":"keywords","content":"redis,sentinel,redis-cluster"}],["meta",{"name":"description","content":"redis集群方案总结，希望对你有帮助！"}],["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/notes-base/summary/base-components/redis/advance/redis-distributed.html"}],["meta",{"property":"og:site_name","content":"Offer收割机"}],["meta",{"property":"og:title","content":"Redis分布式解决方案"}],["meta",{"property":"og:description","content":"一、Redis复制原理 Redis的复制功能包括数据同步(sync)和命令传播(command propagate)两个操作 数据同步-sync和psync命令 sync命令执行流程 从服务器向主服务器发送 sync命令 主服务器收到sync命令,开始执行bgsave命令,生成rdb文件,并使用一个缓冲区记录从现在开始执行的所有写命令 当主服务器bgs..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-11T08:46:41.000Z"}],["meta",{"property":"article:tag","content":"Redis集群"}],["meta",{"property":"article:modified_time","content":"2025-04-11T08:46:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis分布式解决方案\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-11T08:46:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Jason\\",\\"url\\":\\"https://jason.com\\"}]}"]],"description":"一、Redis复制原理 Redis的复制功能包括数据同步(sync)和命令传播(command propagate)两个操作 数据同步-sync和psync命令 sync命令执行流程 从服务器向主服务器发送 sync命令 主服务器收到sync命令,开始执行bgsave命令,生成rdb文件,并使用一个缓冲区记录从现在开始执行的所有写命令 当主服务器bgs..."},"git":{"createdTime":1744361201000,"updatedTime":1744361201000,"contributors":[{"name":"Jason Statham","username":"Jason Statham","email":"xpt_notes@163.com","commits":1,"url":"https://github.com/Jason Statham"}]},"readingTime":{"minutes":5.95,"words":1785},"filePathRelative":"summary/base-components/redis/advance/redis-distributed.md","localizedDate":"2025年4月11日","autoDesc":true}')},6995:(e,i)=>{i.A=(e,i)=>{const s=e.__vccOpts||e;for(const[e,a]of i)s[e]=a;return s}}}]);